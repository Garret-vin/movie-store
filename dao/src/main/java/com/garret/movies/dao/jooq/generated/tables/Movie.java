/*
 * This file is generated by jOOQ.
 */
package com.garret.movies.dao.jooq.generated.tables;


import com.garret.movies.dao.jooq.generated.Indexes;
import com.garret.movies.dao.jooq.generated.Keys;
import com.garret.movies.dao.jooq.generated.Moviestore;
import com.garret.movies.dao.jooq.generated.tables.records.MovieRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movie extends TableImpl<MovieRecord> {

    private static final long serialVersionUID = 392825735;

    /**
     * The reference instance of <code>movieStore.movie</code>
     */
    public static final Movie MOVIE = new Movie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRecord> getRecordType() {
        return MovieRecord.class;
    }

    /**
     * The column <code>movieStore.movie.id</code>.
     */
    public final TableField<MovieRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>movieStore.movie.director</code>.
     */
    public final TableField<MovieRecord, String> DIRECTOR = createField("director", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>movieStore.movie.imdb_id</code>.
     */
    public final TableField<MovieRecord, String> IMDB_ID = createField("imdb_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>movieStore.movie.imdb_rating</code>.
     */
    public final TableField<MovieRecord, Double> IMDB_RATING = createField("imdb_rating", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>movieStore.movie.imdb_votes</code>.
     */
    public final TableField<MovieRecord, Integer> IMDB_VOTES = createField("imdb_votes", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>movieStore.movie.plot</code>.
     */
    public final TableField<MovieRecord, String> PLOT = createField("plot", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>movieStore.movie.released</code>.
     */
    public final TableField<MovieRecord, Date> RELEASED = createField("released", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>movieStore.movie.runtime</code>.
     */
    public final TableField<MovieRecord, String> RUNTIME = createField("runtime", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>movieStore.movie.title</code>.
     */
    public final TableField<MovieRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>movieStore.movie.type</code>.
     */
    public final TableField<MovieRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>movieStore.movie</code> table reference
     */
    public Movie() {
        this(DSL.name("movie"), null);
    }

    /**
     * Create an aliased <code>movieStore.movie</code> table reference
     */
    public Movie(String alias) {
        this(DSL.name(alias), MOVIE);
    }

    /**
     * Create an aliased <code>movieStore.movie</code> table reference
     */
    public Movie(Name alias) {
        this(alias, MOVIE);
    }

    private Movie(Name alias, Table<MovieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movie(Name alias, Table<MovieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Movie(Table<O> child, ForeignKey<O, MovieRecord> key) {
        super(child, key, MOVIE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Moviestore.MOVIESTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOVIE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MovieRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOVIE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieRecord>>asList(Keys.KEY_MOVIE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Movie as(String alias) {
        return new Movie(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Movie as(Name alias) {
        return new Movie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(String name) {
        return new Movie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(Name name) {
        return new Movie(name, null);
    }
}
